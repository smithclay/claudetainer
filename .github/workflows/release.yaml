name: "Release"
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    if: ${{ (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: "Build Claudetainer CLI"
        run: |
          chmod +x build.sh
          ./build.sh
          
      - name: "Test Built CLI"
        run: |
          ./dist/claudetainer --version
          ./dist/claudetainer --help >/dev/null

      - name: "Publish Features"
        uses: devcontainers/action@v1
        with:
          publish-features: "true"
          base-path-to-features: "./src"
          generate-docs: "true"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Get Version"
        id: version
        run: |
          VERSION=$(node -e "console.log(JSON.parse(require('fs').readFileSync('src/claudetainer/devcontainer-feature.json', 'utf8')).version)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"

      - name: "Delete Previous Release (if exists)"
        run: |
          TAG="cli-v${{ steps.version.outputs.version }}"
          # Delete release if it exists
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Deleting existing release $TAG"
            gh release delete "$TAG" --yes
          fi
          # Delete tag if it exists
          if git tag -l | grep -q "^$TAG$"; then
            echo "Deleting existing tag $TAG"
            git push --delete origin "$TAG" || true
            git tag -d "$TAG" || true
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Create Release"
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "cli-v${{ steps.version.outputs.version }}"
          release_name: "Claudetainer CLI v${{ steps.version.outputs.version }}"
          body: |
            ## Claudetainer CLI v${{ steps.version.outputs.version }}
            
            ### Features
            - Easy and opinionated Claude Code in a dev container
            - Automatic language detection (Python, Node.js, Rust, Go, Shell)
            - Multi-multiplexer support (Zellij, tmux, none)
            - Dynamic port allocation and notification channels
            - Comprehensive health checking with `claudetainer doctor`
            
            ### Installation
            ```bash
            # Download and install
            curl -L https://github.com/smithclay/claudetainer/releases/download/cli-v${{ steps.version.outputs.version }}/claudetainer -o claudetainer
            chmod +x claudetainer
            sudo mv claudetainer /usr/local/bin/
            
            # Or with brew (if tap is available)
            brew install smithclay/tap/claudetainer
            ```
            
            ### Usage
            ```bash
            claudetainer init python    # Create Python devcontainer
            claudetainer up             # Start the container
            claudetainer ssh            # Connect via SSH
            claudetainer doctor         # Health check
            ```
            
            This release includes both the DevContainer feature and the standalone CLI tool.
          draft: false
          prerelease: false

      - name: "Upload CLI Binary"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/claudetainer
          asset_name: claudetainer
          asset_content_type: application/octet-stream

      - name: Create PR for Documentation
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Automated documentation update [skip ci]"
          title: "Automated documentation update"
          body: |
            Automated documentation update generated by the release workflow.
            
            This PR updates the README.md files for published features.
            
            **CLI Release:** v${{ steps.version.outputs.version }}
          branch: automated-documentation-update
          delete-branch: true
          add-paths: |
            */**/README.md